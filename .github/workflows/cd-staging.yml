name: CD - Staging

on:
  push:
    branches: ["develop"]
  workflow_dispatch:

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      COVERAGE_MIN: "60"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov

      - name: Run tests with coverage (staging gate)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          COVERAGE_MIN: ${{ env.COVERAGE_MIN }}
        run: |
          set -e
          pytest -q --cov=src --cov-report=xml
          python -c "import xml.etree.ElementTree as ET,sys,os; r=ET.parse('coverage.xml').getroot(); c=float(r.attrib.get('line-rate',0.0))*100; print(f'Coverage: {c:.2f}%'); sys.exit(1 if c<float(os.environ['COVERAGE_MIN']) else 0)"

      - name: Trigger Render deploy (staging)
        env:
          RENDER_STAGING_DEPLOY_HOOK: ${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}
        run: curl -sSf -X POST "$RENDER_STAGING_DEPLOY_HOOK"
